rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function getUserRole() {
      return getUserData().role;
    }
    
    function getUserTeamId() {
      return getUserData().teamId;
    }
    
    function isAdmin() {
      return getUserRole() == 'admin';
    }
    
    function isManager() {
      return getUserRole() == 'manager';
    }
    
    function isManagerOrAdmin() {
      return getUserRole() in ['manager', 'admin'];
    }
    
    function isCloser() {
      return getUserRole() == 'closer';
    }
    
    function isSetter() {
      return getUserRole() == 'setter';
    }
    
    function isSameTeam(teamId) {
      return getUserTeamId() == teamId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || 
         isManagerOrAdmin() || 
         (resource.data.teamId == getUserTeamId()));
      
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      allow update: if isAuthenticated() && 
        (request.auth.uid == userId || isManagerOrAdmin());
      
      allow delete: if isAuthenticated() && isAdmin();
    }

    // ENHANCED Leads collection - Specific rules for manager/admin job acceptance
    match /leads/{leadId} {
      allow read: if isAuthenticated() && (
        // Admins can read all leads
        isAdmin() ||
        // Managers can read leads in their team
        (isManager() && resource.data.teamId == getUserTeamId()) ||
        // Setters can read leads in their team
        (isSetter() && resource.data.teamId == getUserTeamId()) ||
        // Closers can read leads assigned to them or in their team
        (isCloser() && (
          resource.data.assignedCloserId == request.auth.uid ||
          resource.data.teamId == getUserTeamId()
        ))
      );
      
      allow create: if isAuthenticated() && (
        // Admins and managers can create leads
        isManagerOrAdmin() ||
        // Setters can create leads for their team
        (isSetter() && request.resource.data.teamId == getUserTeamId())
      );
      
      allow update: if isAuthenticated() && (
        // Admins can update any lead
        isAdmin() ||
        
        // Managers can update leads in their team
        (isManager() && resource.data.teamId == getUserTeamId()) ||
        
        // Setters can update leads they created or in their team
        (isSetter() && (
          resource.data.setterId == request.auth.uid ||
          resource.data.teamId == getUserTeamId()
        )) ||
        
        // Closers can update leads assigned to them
        (isCloser() && resource.data.assignedCloserId == request.auth.uid) ||
        
        // CRITICAL: Special case for job acceptance by managers/admins
        // Allow managers to update leads for job acceptance on behalf of closers
        (isManager() && 
         resource.data.teamId == getUserTeamId() &&
         // Only allow specific job acceptance fields to be updated
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'status', 'acceptedAt', 'acceptedBy', 'updatedAt'
         ]) &&
         // Only allow transitions to accepted status or in_process from valid states
         (request.resource.data.status in ['accepted', 'in_process'] &&
          resource.data.status in ['waiting_assignment', 'scheduled', 'accepted'])
        ) ||
        
        // CRITICAL: Special case for disposition updates by managers/admins
        // Allow managers/admins to update lead dispositions
        (isManagerOrAdmin() && 
         resource.data.teamId == getUserTeamId() &&
         // Allow disposition-related field updates
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'status', 'updatedAt', 'dispositionNotes', 'dispositionUpdatedBy', 
           'dispositionUpdatedAt', 'assignedCloserId', 'assignedCloserName', 
           'scheduledAppointmentTime', 'acceptedAt', 'acceptedBy'
         ])
        )
      );
      
      allow delete: if isAuthenticated() && isManagerOrAdmin();
    }

    // Closers collection
    match /closers/{closerId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (resource.data.teamId == getUserTeamId()) ||
        request.auth.uid == closerId
      );
      
      allow create: if isAuthenticated() && isManagerOrAdmin();
      
      allow update: if isAuthenticated() && (
        isManagerOrAdmin() ||
        (request.auth.uid == closerId && 
         // Closers can only update their own status and basic info
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'status', 'updatedAt', 'phone', 'avatarUrl'
         ]))
      );
      
      allow delete: if isAuthenticated() && isManagerOrAdmin();
    }

    // Lead actions collection (for logging job acceptances and other actions)
    match /lead_actions/{actionId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isManager() && getUserTeamId() in resource.data.teamId) ||
        resource.data.performedBy == request.auth.uid
      );
      
      allow create: if isAuthenticated();
      
      allow update, delete: if isAuthenticated() && 
        (isAdmin() || resource.data.performedBy == request.auth.uid);
    }

    // Activities collection (for logging)
    match /activities/{activityId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isManager() && resource.data.teamId == getUserTeamId()) ||
        resource.data.closerId == request.auth.uid ||
        resource.data.acceptedBy == request.auth.uid
      );
      
      allow create: if isAuthenticated();
      
      allow update, delete: if isAuthenticated() && isAdmin();
    }

    // Pending approvals collection
    match /pending_approvals/{approvalId} {
      allow read: if isAuthenticated() && (
        isManagerOrAdmin() ||
        resource.data.userId == request.auth.uid
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && isManagerOrAdmin();
      
      allow delete: if isAuthenticated() && isManagerOrAdmin();
    }

    // Invitations collection
    match /invitations/{invitationId} {
      allow read: if isAuthenticated() && (
        isManagerOrAdmin() ||
        resource.data.email == request.auth.token.email
      );
      
      allow create: if isAuthenticated() && isManagerOrAdmin();
      
      allow update: if isAuthenticated() && (
        isManagerOrAdmin() ||
        resource.data.email == request.auth.token.email
      );
      
      allow delete: if isAuthenticated() && isManagerOrAdmin();
    }

    // Chat messages collection
    match /chat_messages/{messageId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (resource.data.chatType == 'team' && resource.data.chatId == getUserTeamId()) ||
        (resource.data.chatType == 'region' && resource.data.chatId == getUserTeamId())
      );
      
      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid &&
        ((request.resource.data.chatType == 'team' && 
          request.resource.data.chatId == getUserTeamId()) ||
         (request.resource.data.chatType == 'region'))
      );
      
      allow update: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || isManagerOrAdmin());
      
      allow delete: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || isManagerOrAdmin());
    }

    // Chat channels collection
    match /chat_channels/{channelId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (resource.data.type == 'team' && resource.data.teamId == getUserTeamId()) ||
        (resource.data.type == 'region')
      );
      
      allow create, update, delete: if isAuthenticated() && isManagerOrAdmin();
    }

    // Reports collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isManager() && resource.data.teamId == getUserTeamId()) ||
        resource.data.generatedBy == request.auth.uid
      );
      
      allow create: if isAuthenticated() && isManagerOrAdmin();
      
      allow update, delete: if isAuthenticated() && (
        isAdmin() ||
        resource.data.generatedBy == request.auth.uid
      );
    }

    // Teams collection
    match /teams/{teamId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        teamId == getUserTeamId()
      );
      
      allow create, update, delete: if isAuthenticated() && isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid ||
        (resource.data.teamId == getUserTeamId() && isManagerOrAdmin())
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid
      );
      
      allow delete: if isAuthenticated() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid
      );
    }

    // Analytics collection
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isManager() && resource.data.teamId == getUserTeamId())
      );
      
      allow create, update, delete: if isAuthenticated() && isManagerOrAdmin();
    }

    // User tokens for FCM
    match /userTokens/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Appointment reminders
    match /appointmentReminders/{reminderId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        resource.data.assignedCloserId == request.auth.uid ||
        (isManager() && getUserTeamId() in resource.data.teamId)
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.assignedCloserId == request.auth.uid
      );
      
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Function errors (for debugging)
    match /function_errors/{errorId} {
      allow read: if isAuthenticated() && isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && isAdmin();
    }

    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}